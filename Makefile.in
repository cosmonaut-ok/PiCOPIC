MKDIR                 = mkdir
ROOTDIR               = .
SRCDIR                = $(ROOTDIR)/src
TARGETDIR             ?= $(ROOTDIR)/target
OBJDIR                = $(TARGETDIR)/obj
INCLUDEDIR            = $(ROOTDIR)/include
SUBDIRS               =
TESTSUBDIRS           = test/unit
EXES                  = PiCoPiC
TESTDIR               = testingdir
### Common settings
CEXTRA                =
CXXEXTRA              =
DEFINES               =
INCLUDE_PATH          = -I$(INCLUDEDIR)
LIBRARY_PATH          =
LIBRARIES             =
DOXYGEN               = doxygen
DOXYGEN_CONFIGS       = doc/app.conf doc/lib.conf doc/vis.conf
DOXYGEN_FORMATS       = @WITH_DOXYGEN_FORMATS@
DOXYGEN_DIRS          = doc/app doc/lib doc/vis
RELEASE               = @RELEASE@

SUBPTHS               =  algo math phys current maxwellSolver collisions outEngine density temperature pusher

### PiCoPiC sources and settings
PiCoPiC_MODULE           = PiCoPiC
PiCoPiC_C_SRCS           =

PiCoPiC_CXX_SRCS := $(wildcard $(SRCDIR)/*.cpp) $(foreach d, $(SUBPTHS), $(wildcard $(SRCDIR)/$d/*.cpp))

PiCoPiC_LDFLAGS          = @LDFLAGS_ADDITIONAL@
PiCoPiC_ARFLAGS          =
PiCoPiC_LIBRARY_PATH     =
PiCoPiC_LIBRARIES        = $(LIBRARIES)

### picojson sources and settings
picojson_SUBDIR := $(ROOTDIR)/lib/picojson
INCLUDE_PATH += -I$(picojson_SUBDIR)
SUBDIRS += $(picojson_SUBDIR)
# PiCoPiC_LIBRARIES += picojson
# LDFLAGS += -L$(picojson_SUBDIR)

### loguru sources and settings
loguru_SUBDIR := $(ROOTDIR)/lib/loguru
INCLUDE_PATH += -I$(loguru_SUBDIR)
LDFLAGS += -L$(loguru_SUBDIR)
PiCoPiC_LIBRARIES += pthread
PiCoPiC_LIBRARIES += dl
loguru_DEFINES := -DLOGURU_WITH_STREAMS=1

### link hdf5 and HighFive libraries
ifeq (@ENABLE_HDF5@, true)
PiCoPiC_LIBRARIES += hdf5
highfive_SUBDIR := $(ROOTDIR)/lib/HighFive/include
INCLUDE_PATH += -I$(highfive_SUBDIR)
else
PiCoPiC_CXX_SRCS_TMP := $(PiCoPiC_CXX_SRCS)
PiCoPiC_CXX_SRCS = $(filter-out $(SRCDIR)/outEngine/outEngineHDF5.cpp, $(PiCoPiC_CXX_SRCS_TMP))
endif

ifeq (@ENABLE_MPI@, true)
HDF5_ADDITIONAL_OPTIONS := --enable-parallel --enable-shared
endif

PiCoPiC_OBJS := $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(PiCoPiC_CXX_SRCS))
PiCoPiC_OBJS += $(loguru_SUBDIR)/loguru.o

LDFLAGS += $(PiCoPiC_LDFLAGS)

### Global source lists
C_SRCS                = $(PiCoPiC_C_SRCS)
CXX_SRCS              = $(PiCoPiC_CXX_SRCS)

### Tools
ifeq (@ENABLE_MPI@, true)
CC := mpicc
CXX := mpic++
else
CC := gcc
CXX := g++
endif

RC = wrc
AR = ar

CFLAGS ?= @CFLAGS_DEFAULT@
CFLAGS += @CFLAGS_ADDITIONAL@

CXXFLAGS = ${CFLAGS}

### Generic targets
all: build python

build: prepare $(SUBDIRS) $(LIBS) $(EXES)

### Build rules
.PHONY: all clean dummy check-syntax prepare doxygen test test-perf test-h5 test-ext

$(SUBDIRS): dummy
	cd $@ && $(MAKE)

$(DOXYGEN_FORMATS): doxygen
	@for i in $(DOXYGEN_DIRS); do test -f $(ROOTDIR)/$$i/$@/Makefile && (cd $(ROOTDIR)/$$i/$@ && $(MAKE)) || true; done

# Implicit rules
.SUFFIXES: .cpp .cxx
DEFINCL = $(INCLUDE_PATH) $(DEFINES) $(OPTIONS)

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

### rule for loguru subdir
$(loguru_SUBDIR)/%.o: $(loguru_SUBDIR)/%.cpp
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(loguru_DEFINES) -o $@ $<

# Rules for cleaning
CLEAN_FILES  = y.tab.c y.tab.h lex.yy.c core *.orig *.rej \
               \\\#*\\\# *~ *% .\\\#*

BUILD_DIRS = $(OBJDIR) $(foreach d, $(SUBPTHS), $(OBJDIR)/$d) $(TARGETDIR)

clean: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__) $(TESTSUBDIRS:%=%/__clean__) $(DOXYGEN_FORMATS:%=%/__clean__)
	$(RM) $(PiCoPiC_OBJS) $(CLEAN_FILES)
	$(RM) $(LIBS) $(EXES) $(EXES:%=%.so)
	$(RM) -r $(ROOTDIR)/tools/__pycache__/
	$(RM) -r $(DOXYGEN_DIRS)
	$(RM) -r $(TARGETDIR)
	$(RM) -r $(TESTDIR)
	cd $(ROOTDIR)/lib/python/picopic; \
	python setup.py clean --all

$(SUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(MAKE) clean

$(DOXYGEN_FORMATS:%=%/__clean__): dummy
	-cd `dirname doc/$@` && test -f Makefile && $(MAKE) clean || return 0


$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

$(TESTSUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(MAKE) clean

$(PiCoPiC_MODULE): $(PiCoPiC_OBJS)
	$(CXX) $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) $(LDFLAGS) -o $@ $(PiCoPiC_OBJS) $(PiCoPiC_LIBRARY_PATH) $(PiCoPiC_LIBRARIES:%=-l%)

distclean: clean
	$(RM) -r *.avi *.png $(BUILD_DIRS) $(RELEASE) $(RELEASE).zip autom4te.cache config.log config.status configure Makefile scripts/*.sh simulation_result/

$(TESTSUBDIRS:%=%/__test__): dummy
	cd `dirname $@` && $(MAKE) test

test-unit: $(TESTSUBDIRS:%=%/__test__)

test: clean test-unit
	@python3 ./test/functional/test.py

test-perf:
	@python3 ./test/performance/test.py -n 5

# test-ext: clean
# 	@python3 ./test/functional/test.py --type=ext

# test-regression: clean
# 	@python3 ./test/functional/test.py --type=regression --fastmath

# test-tools: test
# 	TESTDIR=$(TESTDIR) /bin/bash ./test/functional/tools.sh

test-full: test-unit test-perf test

check-syntax:
	$(CXX) $(LIBRARY_PATH) $(INCLUDE_PATH) $(CXXFLAGS) -Wall -Wextra -pedantic -fsyntax-only $(PiCoPiC_CXX_SRCS)

prepare:
	@$(MKDIR) -p $(BUILD_DIRS)

doxygen:
	for i in $(shell ls doc/*.svg); do convert $$i $$(dirname $$i)/$$(basename $$i .svg).png; done
	for i in $(DOXYGEN_CONFIGS); do $(DOXYGEN) $$i; done

doc: doxygen $(DOXYGEN_FORMATS)

# dist: all doc
# 	cp PiCoPiC $(RELEASE)
# 	cp -r CHANGELOG.md $(RELEASE)
# 	cp -r tools $(RELEASE)/tools
# 	$(MKDIR) -p $(RELEASE)/doc
# 	cp doc/app/latex/refman.pdf $(RELEASE)/doc/PiCoPiC.pdf
# 	cp doc/vis/latex/refman.pdf $(RELEASE)/doc/visualization.pdf
# 	zip -r `basename $(RELEASE)`.zip $(RELEASE)

hdf5: prepare
	test -d $(TARGETDIR)/@HDF5_VERSION@ || \
	(cd $(TARGETDIR); \
	wget -qO- "@HDF5_URL@" | tar xjf -; \
	cd @HDF5_VERSION@; \
	./autogen.sh; \
	./configure --enable-cxx --enable-build-mode=production --prefix=@prefix@ $(HDF5_ADDITIONAL_OPTIONS); \
	make)

hdf5-install: hdf5
	cd $(TARGETDIR)/@HDF5_VERSION@; \
	make install

python:
	cd $(ROOTDIR)/lib/python/picopic; \
	python setup.py install

pack-release:
	@tar -czpf PiCoPiC_$(RELEASE).tar.gz ./PiCoPiC ./PiCoPiC.json lib/python/picopic/ tools/ doc/app/html/ doc/app/latex/refman.pdf doc/vis/html/ doc/vis/latex/refman.pdf
